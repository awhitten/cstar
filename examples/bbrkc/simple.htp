#if !defined(_SIMPLE_)
#  define _SIMPLE_

class model_data : public ad_comm{
  int II;
  int JJ;
  int DIpnt;
  data_int Nfleet;
  data_int Nsurvey;
  data_int Yr1;
  data_int Yr2;
  data_int BMSY_Y1;
  data_int BMSY_Y2;
  data_int Nclass;
  data_int NallClass;
  data_imatrix ClassLink;
  data_number gamma;
  data_vector Length_inp;
  dvector Length;
  data_vector Wght_inp;
  dvector Wght;
  data_vector fecu_inp;
  dvector fecu;
  data_vector fleet_mort;
  data_vector hg;
  data_vector Mpnt;
  int DIyr;
  int MMvals;
  data_vector CatchUnit;
  data_vector MultCatFleet;
  data_vector SurveyUnit;
  data_vector MultCatSurvey;
  data_int DiscardsOrTotal;
  int DIfleet;
  data_matrix CatchAndDiscard;
  data_3array SurveyEst;
  data_matrix tc;
  data_matrix Effort;
  data_imatrix FOverWrite;
  ivector NcatchF;
  int maxFleetLF;
  data_ivector NLFfleet;
  imatrix YrFleetLF;
  dmatrix SSFleetLF;
  d3_array FleetLF;
  int maxSurveyLF;
  data_ivector NLFsurvey;
  imatrix YrSurveyLF;
  dmatrix SSSurveyLF;
  d3_array SurveyLF;
  data_imatrix FleetSelexPnt;
  int NSelex;
  int NSelexPat;
  data_imatrix SurveySelexPnt;
  dmatrix SelexType;
  dvector SelexInit;
  dvector SelexLow;
  dvector SelexHi;
  ivector SelexPhase;
  dmatrix SelexSpex;
  data_int SelexInpType;
  int NRetPars;
  data_ivector FleetRetPnt;
  data_matrix RetainParSpex;
  dvector RetainParInit;
  dvector RetainParLow;
  dvector RetainParHi;
  ivector RetainParPhase;
  data_imatrix SurveyQPnt;
  int NSurveyQ;
  data_int NsubSurveyFleets;
  data_imatrix SubFltSpec;
  data_matrix SurveyQSpex;
  dvector SurveyQInit;
  dvector SurveyQLow;
  dvector SurveyQHi;
  dvector SurveyQPMean;
  dvector SurveyQPSD;
  ivector SurveyQPhase;
  data_number R0init;
  data_number R0low;
  data_number R0hi;
  data_int R0Phase;
  data_number Minit;
  data_number Mlow;
  data_number Mhi;
  data_int MPhase;
  data_number MPriorMean;
  data_number MPriorSD;
  data_matrix MaddSpex;
  dvector Maddinit;
  dvector Maddlow;
  dvector Maddhi;
  ivector MaddPhase;
  data_matrix logNinitialSpex;
  dvector logNinitialInit;
  dvector logNinitialLow;
  dvector logNinitialHi;
  ivector logNinitialPhase;
  data_matrix TransParsSpex;
  dvector TransParsInit;
  dvector TransParsLow;
  dvector TransParsHi;
  ivector TransParsPhase;
  int NPriorTerms;
  int NLikeTerms;
  data_vector PriorWeight;
  data_vector DataWeight;
  data_int Lag;
  data_int SR_RelAct;
  data_int IgnorePINFile;
  data_int Diag;
  data_int Test;
  d3_array FleetObsLF;
  d3_array SurveyObsLF;
  int IsB0;
  int SR_rel;
  ~model_data();
  model_data(int argc,char * argv[]);
  friend class model_parameters;
};

class model_parameters : public model_data ,
  public function_minimizer
{
public:
  ~model_parameters();
  void preliminary_calculations(void);
  void set_runtime(void);
  virtual void * mycast(void) {return (void*)this;}
  static int mc_phase(void)
  {
    return initial_params::mc_phase;
  }
  static int mceval_phase(void)
  {
    return initial_params::mceval_phase;
  }
  static int sd_phase(void)
  {
    return initial_params::sd_phase;
  }
  static int current_phase(void)
  {
    return initial_params::current_phase;
  }
  static int last_phase(void)
  {
    return (initial_params::current_phase
      >=initial_params::max_number_phases);
  }
private:
  ivector integer_control_flags;
  dvector double_control_flags;
  param_init_bounded_number logRbar;
  param_init_bounded_number M0;
  param_init_bounded_number_vector Mm;
  param_init_bounded_number_vector TransPars;
  param_init_bounded_number_vector SelexPar;
  param_init_bounded_number_vector RetainPar;
  param_init_bounded_number_vector LogSurveyQ;
  param_init_bounded_number_vector logNinitial;
  param_init_bounded_vector_vector FEst;
  param_init_vector RecDev;
  param_matrix FAll;
  param_vector PriorVal;
  param_vector LikeVal;
  objective_function_value fout;
  param_matrix N;
  param_matrix S;
  param_3array SF;
  param_matrix ExplRates;
  param_matrix Trans;
  param_matrix RetCatMale;
  param_3array FleetSelex;
  param_3array SelexSurvey;
  param_vector SurveyQ;
  param_matrix SelexAll;
  param_3array CatFleet;
  param_matrix CatFleetWghtPred;
  param_matrix CatFleetNumPred;
  param_3array PredSurvey;
  param_matrix PredSurveyWght;
  param_matrix PredSurveyNum;
  param_vector qEff;
  param_vector M;
  param_vector Fdirect;
  param_number Fmult;
  param_number MMBOut;
  param_number F35;
  param_number SBPR35;
  param_number RecOut;
  param_number CatchOut;
  param_vector mbio;
  param_vector MortF;
  param_number R0;
  param_number Steep;
  param_number MMB0;
  param_vector MMB;
  param_stddev_vector LogMMB;
  param_vector Recruits;
  param_stddev_vector LogRecruits;
  param_stddev_vector LogRMMB;
public:
  virtual void userfunction(void);
  virtual void report(void);
  virtual void final_calcs(void);
  model_parameters(int sz,int argc, char * argv[]);
  virtual void initializationfunction(void){}
  void Initial_size_structure(void);
  void Update_population(void);
  void Set_growth(void);
  void Set_selex(void);
  void Set_survival(void);
  void Get_Catch_Pred(void);
  void Get_Survey(void);
  void ObjFunction(void);
  void Find_F35(void);
  void Get_Steepness(void);
  void ProjConstF(void);

};
#endif
